services:
  # MongoDB voor main API
  mongodb:
    image: mongo:latest
    container_name: mijn-mongo
    volumes:
      - ./data:/data/db
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # MongoDB voor notification service
  notification-mongo:
    image: mongo:latest
    container_name: notification-mongo
    volumes:
      - ./notification-data:/data/db
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 60s

  # Main API service
  api:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: mijn-api
    ports:
      - "3000:12345"
    environment:
      MONGO_URL: mongodb://mijn-mongo:27017
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      PORT: 12345
      DB_NAME: myapp
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "3002:3001"
    environment:
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      MONGO_URL: mongodb://notification-mongo:27017
      DB_NAME: notifications
      PORT: 3001
    depends_on:
      notification-mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mijn-frontend
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_started
    restart: unless-stopped

  # MongoDB Exporter voor monitoring
  db-exporter:
    image: bitnami/mongodb-exporter:latest
    container_name: mongo-exporter
    environment:
      - MONGODB_URI=mongodb://mijn-mongo:27017
    depends_on:
      mongodb:
        condition: service_healthy
    restart: unless-stopped

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alerts:/etc/prometheus/alerts
    ports:
      - "9090:9090"
    restart: unless-stopped

  # Grafana dashboard
  grafana:
    build:
      context: monitoring/grafana
      dockerfile: Dockerfile
    container_name: grafana
    ports:
      - "3100:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

  # Alertmanager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  rabbitmq_data: